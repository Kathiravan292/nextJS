What is Next.js?
  Next.js is a React-based web framework that helps you build modern, fast, and SEO-friendly web applications easily.
 
The key features of Next.js:  
  🌟 1. File-based Routing
  ⚡ 2. Server-Side Rendering (SSR)  
  🏗️ 3. Static Site Generation (SSG) 
  🔄 4. Incremental Static Regeneration (ISR)  
  🧠 5. API Routes (Built-in Backend)
  🖼️ 6. Image Optimization
  🧭 7. App Router (New in Next.js 13+)  
  🧩 8. Layouts & Nested Routing 
  ⚙️ 9. Middleware
___________________________________________________________________________________________________________________________________________________________________
Routing Convenction:
  Next.js automatically creates routes based on your folder and file structure — no need for React Router.
  There are two routing systems you might use:
Basic Example:
  app/
 ├── page.js          →   /
 ├── about/
 │     └── page.js    →   /about
 ├── contact/
 │     └── page.js    →   /contact
___________________________________________________________________________________________________________________________________________________________________
🧭 Nested Routes in Next.js (App Router):
  In Next.js, folders inside the app/ directory automatically define nested routes.
  You don’t need React Router — everything is handled by file and folder structure.

app/
 ├── page.tsx                →  /
 ├── about/
 │    └── page.tsx           →  /about
 ├── products/
 │    ├── page.tsx           →  /products
 │    └── details/
 │         └── page.tsx      →  /products/details
 └── layout.tsx
___________________________________________________________________________________________________________________________________________________________________
Dynamic routes:
  In Next.js App Router, a dynamic route lets you create pages that respond to variable path segments in the URL.
app/
 ├── layout.tsx
 ├── page.tsx
 └── product/
     ├── [productId]/
     │   └── page.tsx

___________________________________________________________________________________________________________________________________________________________________
nested dynamic routes:
  n Next.js, nested dynamic routes let you create pages whose URLs depend on dynamic parameters — like /blog/[id]/comments/[commentId].
  app/
 └── blog/
      └── [id]/
           └── comments/
                └── [commentId]/
                     └── page.js
___________________________________________________________________________________________________________________________________________________________________
colocation:
  Colocation simply means keeping files that are related to a specific route inside the same folder as that route.

Instead of having separate global folders for components, styles, tests, etc.,
Next.js encourages you to place them right next to the route (co-located).

Example 1 — Normal Nested Route (Without Colocation):
app/
 ├── blog/
 │    ├── [id]/
 │    │    └── page.js
 │    └── page.js
 ├── components/
 │    └── Comment.js
 ├── styles/
 │    └── blog.css
 └── layout.js

Example 2 — With Colocation:
app/
 └── blog/
      ├── [id]/
      │    ├── page.js
      │    ├── Comment.js         ← component for this route
      │    ├── CommentForm.js     ← helper component
      │    ├── style.module.css   ← route-specific style
      │    └── data.js            ← API or data fetching file
      ├── page.js
      └── layout.js
___________________________________________________________________________________________________________________________________________________________________
What Is a “Private Folder” in Next.js?
      A private folder is any folder whose name starts with an underscore (_),
    like this:
    
    app/
     └── blog/
          ├── _components/
          └── page.js
    
    
    👉 Next.js treats folders starting with _ as non-routable —
    they are ignored by the routing system.

___________________________________________________________________________________________________________________________________________________________________
What Are Group Routes in Next.js?
      Group Routes let you organize your folder structure without affecting the URL.
      app/
     ├── (auth)/
     │    ├── layout.js
     │    ├── login/page.js
     │    └── register/page.js
     ├── (dashboard)/
     │    ├── layout.js
     │    ├── home/page.js
     │    └── settings/page.js
     └── layout.js
___________________________________________________________________________________________________________________________________________________________________
What You Mean by “Multiple Root Router:
      app/
     ├─ (marketing)/
     │   ├─ layout.js        ← Root layout #1 (public site)
     │   └─ page.js          ← Home page
     │
     ├─ (dashboard)/
     │   ├─ layout.js        ← Root layout #2 (private area)
     │   ├─ page.js          ← Dashboard home
     │   └─ settings/
     │       └─ page.js
     │
     └─ not-found.js
____________________________________________________________________________________________________________________________________________________________________

What is Metadata in Next.js:
      In the App Router, metadata is a built-in SEO system that automatically updates <head> tags for every route — including titles, descriptions, Open Graph tags, favicons, etc.
      No need to manually use <Head> anymore.

    Two Ways to Define Metadata

        You can define metadata in:
              Static object export
              Dynamic function export
___________________________________________________________________________________________________________________________________________________________________

What is the Link Component:
    In Next.js, the Link component (from next/link) enables client-side navigation — meaning fast page transitions without full reloads.
____________________________________________________________________________________________________________________________________________________________________

Navigating Programmatically:
    “Navigating programmatically” means changing the current page or route using code instead of a user manually clicking a link or button.

      "use client";
import { useRouter } from "next/navigation";

export default function Page() {
  const router = useRouter();

  const goToHome = () => {
    router.push("/home");
  };

  return <button onClick={goToHome}>Go Home</button>;
}
____________________________________________________________________________________________________________________________________________________________________

Templates:
      Templates are similar to layouts, but with one big difference:
Templates re-render from scratch every time you navigate between pages that share them.

| Feature                           | Layout                                | Template                                                             |
| --------------------------------- | ------------------------------------- | -------------------------------------------------------------------- |
| Shared between routes             | ✅ Yes                                 | ✅ Yes                                                                |
| Preserves state on navigation     | ✅ Yes                                 | ❌ No                                                                 |
| Recreates DOM elements            | ❌ No                                  | ✅ Yes                                                                |
| Re-runs effects (useEffect, etc.) | ❌ No                                  | ✅ Yes                                                                |
| Use case                          | Persistent UI (navbar, sidebar, etc.) | Pages that need reset state per navigation (forms, animations, etc.) |

____________________________________________________________________________________________________________________________________________________________________

